webpackJsonp([0],[,function(module,exports,__webpack_require__){"use strict";eval("\n\n//=========================================================================\n// general purpose helpers (mostly math)\n//=========================================================================\n\nvar Util = {\n\n  timestamp: function timestamp() {\n    return new Date().getTime();\n  },\n  toInt: function toInt(obj, def) {\n    if (obj !== null) {\n      var x = parseInt(obj, 10);if (!isNaN(x)) {\n        return x;\n      }\n    }return Util.toInt(def, 0);\n  },\n  toFloat: function toFloat(obj, def) {\n    if (obj !== null) {\n      var x = parseFloat(obj);if (!isNaN(x)) {\n        return x;\n      }\n    }return Util.toFloat(def, 0.0);\n  },\n  limit: function limit(value, min, max) {\n    return Math.max(min, Math.min(value, max));\n  },\n  randomInt: function randomInt(min, max) {\n    return Math.round(Util.interpolate(min, max, Math.random()));\n  },\n  randomChoice: function randomChoice(options) {\n    return options[Util.randomInt(0, options.length - 1)];\n  },\n  percentRemaining: function percentRemaining(n, total) {\n    return n % total / total;\n  },\n  accelerate: function accelerate(v, accel, dt) {\n    return v + accel * dt;\n  },\n  interpolate: function interpolate(a, b, percent) {\n    return a + (b - a) * percent;\n  },\n  easeIn: function easeIn(a, b, percent) {\n    return a + (b - a) * Math.pow(percent, 2);\n  },\n  easeOut: function easeOut(a, b, percent) {\n    return a + (b - a) * (1 - Math.pow(1 - percent, 2));\n  },\n  easeInOut: function easeInOut(a, b, percent) {\n    return a + (b - a) * (-Math.cos(percent * Math.PI) / 2 + 0.5);\n  },\n  exponentialFog: function exponentialFog(distance, density) {\n    return 1 / Math.pow(Math.E, distance * distance * density);\n  },\n\n  increase: function increase(start, increment, max) {\n    // with looping\n    var result = start + increment;\n    while (result >= max) {\n      result -= max;\n    }\n    while (result < 0) {\n      result += max;\n    }\n    return result;\n  },\n\n  project: function project(p, cameraX, cameraY, cameraZ, cameraDepth, width, height, roadWidth) {\n    p.camera.x = (p.world.x || 0) - cameraX;\n    p.camera.y = (p.world.y || 0) - cameraY;\n    p.camera.z = (p.world.z || 0) - cameraZ;\n    p.screen.scale = cameraDepth / p.camera.z;\n    p.screen.x = Math.round(width / 2 + p.screen.scale * p.camera.x * width / 2);\n    p.screen.y = Math.round(height / 2 - p.screen.scale * p.camera.y * height / 2);\n    p.screen.w = Math.round(p.screen.scale * roadWidth * width / 2);\n  },\n\n  overlap: function overlap(x1, w1, x2, w2, percent) {\n    var half = (percent || 1) / 2;\n    var min1 = x1 - w1 * half;\n    var max1 = x1 + w1 * half;\n    var min2 = x2 - w2 * half;\n    var max2 = x2 + w2 * half;\n    return !(max1 < min2 || min1 > max2);\n  }\n\n};\n\nmodule.exports = Util;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")},,function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n//=============================================================================\n// RACING GAME CONSTANTS\n//=============================================================================\nvar KEY = exports.KEY = {\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40,\n    A: 65,\n    D: 68,\n    S: 83,\n    W: 87\n};\n\nvar COLORS = exports.COLORS = {\n    SKY: '#72D7EE',\n    TREE: '#005108',\n    FOG: '#005108',\n    LIGHT: { road: '#6B6B6B', grass: '#10AA10', rumble: '#555555', lane: '#CCCCCC' },\n    DARK: { road: '#696969', grass: '#009A00', rumble: '#BBBBBB' },\n    START: { road: 'white', grass: 'white', rumble: 'white' },\n    FINISH: { road: 'black', grass: 'black', rumble: 'black' }\n};\n\nvar BACKGROUND = exports.BACKGROUND = {\n    HILLS: { x: 5, y: 5, w: 1280, h: 480 },\n    SKY: { x: 5, y: 495, w: 1280, h: 480 },\n    TREES: { x: 5, y: 985, w: 1280, h: 480 }\n};\n\nvar SPRITES = exports.SPRITES = {\n    PALM_TREE: { x: 5, y: 5, w: 215, h: 540 },\n    BILLBOARD08: { x: 230, y: 5, w: 385, h: 265 },\n    TREE1: { x: 625, y: 5, w: 360, h: 360 },\n    DEAD_TREE1: { x: 5, y: 555, w: 135, h: 332 },\n    BILLBOARD09: { x: 150, y: 555, w: 328, h: 282 },\n    BOULDER3: { x: 230, y: 280, w: 320, h: 220 },\n    COLUMN: { x: 995, y: 5, w: 200, h: 315 },\n    BILLBOARD01: { x: 625, y: 375, w: 300, h: 170 },\n    BILLBOARD06: { x: 488, y: 555, w: 298, h: 190 },\n    BILLBOARD05: { x: 5, y: 897, w: 298, h: 190 },\n    BILLBOARD07: { x: 313, y: 897, w: 298, h: 190 },\n    BOULDER2: { x: 621, y: 897, w: 298, h: 140 },\n    TREE2: { x: 1205, y: 5, w: 282, h: 295 },\n    BILLBOARD04: { x: 1205, y: 310, w: 268, h: 170 },\n    DEAD_TREE2: { x: 1205, y: 490, w: 150, h: 260 },\n    BOULDER1: { x: 1205, y: 760, w: 168, h: 248 },\n    BUSH1: { x: 5, y: 1097, w: 240, h: 155 },\n    CACTUS: { x: 929, y: 897, w: 235, h: 118 },\n    BUSH2: { x: 255, y: 1097, w: 232, h: 152 },\n    BILLBOARD03: { x: 5, y: 1262, w: 230, h: 220 },\n    BILLBOARD02: { x: 245, y: 1262, w: 215, h: 220 },\n    STUMP: { x: 995, y: 330, w: 195, h: 140 },\n    SEMI: { x: 1365, y: 490, w: 122, h: 144 },\n    TRUCK: { x: 1365, y: 644, w: 100, h: 78 },\n    CAR03: { x: 1383, y: 760, w: 88, h: 55 },\n    CAR02: { x: 1383, y: 825, w: 80, h: 59 },\n    CAR04: { x: 1383, y: 894, w: 80, h: 57 },\n    CAR01: { x: 1205, y: 1018, w: 80, h: 56 },\n    PLAYER_UPHILL_LEFT: { x: 1383, y: 961, w: 80, h: 45 },\n    PLAYER_UPHILL_STRAIGHT: { x: 1295, y: 1018, w: 80, h: 45 },\n    PLAYER_UPHILL_RIGHT: { x: 1385, y: 1018, w: 80, h: 45 },\n    PLAYER_LEFT: { x: 995, y: 480, w: 80, h: 41 },\n    PLAYER_STRAIGHT: { x: 1085, y: 480, w: 80, h: 41 },\n    PLAYER_RIGHT: { x: 995, y: 531, w: 80, h: 41 }\n};\n\nSPRITES.SCALE = 0.3 * (1 / SPRITES.PLAYER_STRAIGHT.w); // the reference sprite width should be 1/3rd the (half-)roadWidth\n\nSPRITES.BILLBOARDS = [SPRITES.BILLBOARD01, SPRITES.BILLBOARD02, SPRITES.BILLBOARD03, SPRITES.BILLBOARD04, SPRITES.BILLBOARD05, SPRITES.BILLBOARD06, SPRITES.BILLBOARD07, SPRITES.BILLBOARD08, SPRITES.BILLBOARD09];\nSPRITES.PLANTS = [SPRITES.TREE1, SPRITES.TREE2, SPRITES.DEAD_TREE1, SPRITES.DEAD_TREE2, SPRITES.PALM_TREE, SPRITES.BUSH1, SPRITES.BUSH2, SPRITES.CACTUS, SPRITES.STUMP, SPRITES.BOULDER1, SPRITES.BOULDER2, SPRITES.BOULDER3];\nSPRITES.CARS = [SPRITES.CAR01, SPRITES.CAR02, SPRITES.CAR03, SPRITES.CAR04, SPRITES.SEMI, SPRITES.TRUCK];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n//=========================================================================\n// minimalist DOM helpers\n//=========================================================================\n\nvar Dom = {\n\n  get: function get(id) {\n    return id instanceof HTMLElement || id === document ? id : document.getElementById(id);\n  },\n  set: function set(id, html) {\n    Dom.get(id).innerHTML = html;\n  },\n  on: function on(ele, type, fn, capture) {\n    Dom.get(ele).addEventListener(type, fn, capture);\n  },\n  un: function un(ele, type, fn, capture) {\n    Dom.get(ele).removeEventListener(type, fn, capture);\n  },\n  show: function show(ele, type) {\n    Dom.get(ele).style.display = type || 'block';\n  },\n  blur: function blur(ev) {\n    ev.target.blur();\n  },\n\n  addClassName: function addClassName(ele, name) {\n    Dom.toggleClassName(ele, name, true);\n  },\n  removeClassName: function removeClassName(ele, name) {\n    Dom.toggleClassName(ele, name, false);\n  },\n  toggleClassName: function toggleClassName(ele, name, on) {\n    ele = Dom.get(ele);\n    var classes = ele.className.split(' ');\n    var n = classes.indexOf(name);\n    on = typeof on == 'undefined' ? n < 0 : on;\n    if (on && n < 0) {\n      classes.push(name);\n    } else if (!on && n >= 0) {\n      classes.splice(n, 1);\n    }\n    ele.className = classes.join(' ');\n  },\n\n  storage: window.localStorage || {}\n\n};\n\nmodule.exports = Dom;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvbW9kdWxlcy9kb20uanM/Y2VhZCJdLCJuYW1lcyI6WyJEb20iLCJnZXQiLCJpZCIsIkhUTUxFbGVtZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInNldCIsImh0bWwiLCJpbm5lckhUTUwiLCJvbiIsImVsZSIsInR5cGUiLCJmbiIsImNhcHR1cmUiLCJhZGRFdmVudExpc3RlbmVyIiwidW4iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2hvdyIsInN0eWxlIiwiZGlzcGxheSIsImJsdXIiLCJldiIsInRhcmdldCIsImFkZENsYXNzTmFtZSIsIm5hbWUiLCJ0b2dnbGVDbGFzc05hbWUiLCJyZW1vdmVDbGFzc05hbWUiLCJjbGFzc2VzIiwiY2xhc3NOYW1lIiwic3BsaXQiLCJuIiwiaW5kZXhPZiIsInB1c2giLCJzcGxpY2UiLCJqb2luIiwic3RvcmFnZSIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBOztBQUVBLElBQUlBLE1BQU07O0FBRU5DLE9BQU0sYUFBU0MsRUFBVCxFQUFpQztBQUFFLFdBQVNBLGNBQWNDLFdBQWYsSUFBZ0NELE9BQU9FLFFBQXhDLEdBQXFERixFQUFyRCxHQUEwREUsU0FBU0MsY0FBVCxDQUF3QkgsRUFBeEIsQ0FBakU7QUFBK0YsR0FGbEk7QUFHTkksT0FBTSxhQUFTSixFQUFULEVBQWFLLElBQWIsRUFBaUM7QUFBRVAsUUFBSUMsR0FBSixDQUFRQyxFQUFSLEVBQVlNLFNBQVosR0FBd0JELElBQXhCO0FBQXNELEdBSHpGO0FBSU5FLE1BQU0sWUFBU0MsR0FBVCxFQUFjQyxJQUFkLEVBQW9CQyxFQUFwQixFQUF3QkMsT0FBeEIsRUFBaUM7QUFBRWIsUUFBSUMsR0FBSixDQUFRUyxHQUFSLEVBQWFJLGdCQUFiLENBQThCSCxJQUE5QixFQUFvQ0MsRUFBcEMsRUFBd0NDLE9BQXhDO0FBQXNELEdBSnpGO0FBS05FLE1BQU0sWUFBU0wsR0FBVCxFQUFjQyxJQUFkLEVBQW9CQyxFQUFwQixFQUF3QkMsT0FBeEIsRUFBaUM7QUFBRWIsUUFBSUMsR0FBSixDQUFRUyxHQUFSLEVBQWFNLG1CQUFiLENBQWlDTCxJQUFqQyxFQUF1Q0MsRUFBdkMsRUFBMkNDLE9BQTNDO0FBQXNELEdBTHpGO0FBTU5JLFFBQU0sY0FBU1AsR0FBVCxFQUFjQyxJQUFkLEVBQWlDO0FBQUVYLFFBQUlDLEdBQUosQ0FBUVMsR0FBUixFQUFhUSxLQUFiLENBQW1CQyxPQUFuQixHQUE4QlIsUUFBUSxPQUF0QztBQUFzRCxHQU56RjtBQU9OUyxRQUFNLGNBQVNDLEVBQVQsRUFBaUM7QUFBRUEsT0FBR0MsTUFBSCxDQUFVRixJQUFWO0FBQXNELEdBUHpGOztBQVNORyxnQkFBaUIsc0JBQVNiLEdBQVQsRUFBY2MsSUFBZCxFQUF3QjtBQUFFeEIsUUFBSXlCLGVBQUosQ0FBb0JmLEdBQXBCLEVBQXlCYyxJQUF6QixFQUErQixJQUEvQjtBQUF3QyxHQVQ3RTtBQVVORSxtQkFBaUIseUJBQVNoQixHQUFULEVBQWNjLElBQWQsRUFBd0I7QUFBRXhCLFFBQUl5QixlQUFKLENBQW9CZixHQUFwQixFQUF5QmMsSUFBekIsRUFBK0IsS0FBL0I7QUFBd0MsR0FWN0U7QUFXTkMsbUJBQWlCLHlCQUFTZixHQUFULEVBQWNjLElBQWQsRUFBb0JmLEVBQXBCLEVBQXdCO0FBQ3ZDQyxVQUFNVixJQUFJQyxHQUFKLENBQVFTLEdBQVIsQ0FBTjtBQUNBLFFBQUlpQixVQUFVakIsSUFBSWtCLFNBQUosQ0FBY0MsS0FBZCxDQUFvQixHQUFwQixDQUFkO0FBQ0EsUUFBSUMsSUFBSUgsUUFBUUksT0FBUixDQUFnQlAsSUFBaEIsQ0FBUjtBQUNBZixTQUFNLE9BQU9BLEVBQVAsSUFBYSxXQUFkLEdBQThCcUIsSUFBSSxDQUFsQyxHQUF1Q3JCLEVBQTVDO0FBQ0EsUUFBSUEsTUFBT3FCLElBQUksQ0FBZixFQUFtQjtBQUNqQkgsY0FBUUssSUFBUixDQUFhUixJQUFiO0FBQ0QsS0FGRCxNQUVPLElBQUksQ0FBQ2YsRUFBRCxJQUFRcUIsS0FBSyxDQUFqQixFQUFxQjtBQUMxQkgsY0FBUU0sTUFBUixDQUFlSCxDQUFmLEVBQWtCLENBQWxCO0FBQ0Q7QUFDRHBCLFFBQUlrQixTQUFKLEdBQWdCRCxRQUFRTyxJQUFSLENBQWEsR0FBYixDQUFoQjtBQUNELEdBdEJLOztBQXdCTkMsV0FBU0MsT0FBT0MsWUFBUCxJQUF1Qjs7QUF4QjFCLENBQVY7O0FBNEJFQyxPQUFPQyxPQUFQLEdBQWlCdkMsR0FBakIiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gbWluaW1hbGlzdCBET00gaGVscGVyc1xuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbnZhciBEb20gPSB7XG5cbiAgICBnZXQ6ICBmdW5jdGlvbihpZCkgICAgICAgICAgICAgICAgICAgICB7IHJldHVybiAoKGlkIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHx8IChpZCA9PT0gZG9jdW1lbnQpKSA/IGlkIDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpOyB9LFxuICAgIHNldDogIGZ1bmN0aW9uKGlkLCBodG1sKSAgICAgICAgICAgICAgIHsgRG9tLmdldChpZCkuaW5uZXJIVE1MID0gaHRtbDsgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgIG9uOiAgIGZ1bmN0aW9uKGVsZSwgdHlwZSwgZm4sIGNhcHR1cmUpIHsgRG9tLmdldChlbGUpLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZm4sIGNhcHR1cmUpOyAgICB9LFxuICAgIHVuOiAgIGZ1bmN0aW9uKGVsZSwgdHlwZSwgZm4sIGNhcHR1cmUpIHsgRG9tLmdldChlbGUpLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgZm4sIGNhcHR1cmUpOyB9LFxuICAgIHNob3c6IGZ1bmN0aW9uKGVsZSwgdHlwZSkgICAgICAgICAgICAgIHsgRG9tLmdldChlbGUpLnN0eWxlLmRpc3BsYXkgPSAodHlwZSB8fCAnYmxvY2snKTsgICAgICB9LFxuICAgIGJsdXI6IGZ1bmN0aW9uKGV2KSAgICAgICAgICAgICAgICAgICAgIHsgZXYudGFyZ2V0LmJsdXIoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICBcbiAgICBhZGRDbGFzc05hbWU6ICAgIGZ1bmN0aW9uKGVsZSwgbmFtZSkgICAgIHsgRG9tLnRvZ2dsZUNsYXNzTmFtZShlbGUsIG5hbWUsIHRydWUpOyAgfSxcbiAgICByZW1vdmVDbGFzc05hbWU6IGZ1bmN0aW9uKGVsZSwgbmFtZSkgICAgIHsgRG9tLnRvZ2dsZUNsYXNzTmFtZShlbGUsIG5hbWUsIGZhbHNlKTsgfSxcbiAgICB0b2dnbGVDbGFzc05hbWU6IGZ1bmN0aW9uKGVsZSwgbmFtZSwgb24pIHtcbiAgICAgIGVsZSA9IERvbS5nZXQoZWxlKTtcbiAgICAgIHZhciBjbGFzc2VzID0gZWxlLmNsYXNzTmFtZS5zcGxpdCgnICcpO1xuICAgICAgdmFyIG4gPSBjbGFzc2VzLmluZGV4T2YobmFtZSk7XG4gICAgICBvbiA9ICh0eXBlb2Ygb24gPT0gJ3VuZGVmaW5lZCcpID8gKG4gPCAwKSA6IG9uO1xuICAgICAgaWYgKG9uICYmIChuIDwgMCkpIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKG5hbWUpO1xuICAgICAgfSBlbHNlIGlmICghb24gJiYgKG4gPj0gMCkpIHtcbiAgICAgICAgY2xhc3Nlcy5zcGxpY2UobiwgMSk7XG4gICAgICB9XG4gICAgICBlbGUuY2xhc3NOYW1lID0gY2xhc3Nlcy5qb2luKCcgJyk7XG4gICAgfSxcbiAgXG4gICAgc3RvcmFnZTogd2luZG93LmxvY2FsU3RvcmFnZSB8fCB7fVxuICBcbiAgfTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IERvbTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvbW9kdWxlcy9kb20uanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n")},,,function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _constants = __webpack_require__(3);\n\nvar _dom = __webpack_require__(4);\n\nvar _dom2 = _interopRequireDefault(_dom);\n\nvar _raf = __webpack_require__(16);\n\nvar _raf2 = _interopRequireDefault(_raf);\n\nvar _util = __webpack_require__(1);\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _game = __webpack_require__(15);\n\nvar _render = __webpack_require__(17);\n\nvar _render2 = _interopRequireDefault(_render);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _raf2.default)();\n\nconsole.log('We are working!');\n\nconsole.log('KEY: ', _constants.KEY);\nconsole.log('Dom: ', _dom2.default);\nconsole.log('Raf: ', _raf2.default);\nconsole.log('Util: ', _util2.default);\nconsole.log('Game: ', _game.Game);\nconsole.log('Render: ', _render2.default);\n\nvar fps = 60; // how many 'update' frames per second\nvar step = 1 / fps; // how long is each frame (in seconds)\nvar width = 1024; // logical canvas width\nvar height = 768; // logical canvas height\nvar segments = []; // array of road segments\nvar stats = _game.Game.stats('fps'); // mr.doobs FPS counter\nvar canvas = _dom2.default.get('canvas'); // our canvas...\nvar ctx = canvas.getContext('2d'); // ...and its drawing context\nvar background = null; // our background image (loaded below)\nvar sprites = null; // our spritesheet (loaded below)\nvar resolution = null; // scaling factor to provide resolution independence (computed)\nvar roadWidth = 2000; // actually half the roads width, easier math if the road spans from -roadWidth to +roadWidth\nvar segmentLength = 200; // length of a single segment\nvar rumbleLength = 3; // number of segments per red/white rumble strip\nvar trackLength = null; // z length of entire track (computed)\nvar lanes = 3; // number of lanes\nvar fieldOfView = 100; // angle (degrees) for field of view\nvar cameraHeight = 1000; // z height of camera\nvar cameraDepth = null; // z distance camera is from screen (computed)\nvar drawDistance = 300; // number of segments to draw\nvar playerX = 0; // player x offset from center of road (-1 to 1 to stay independent of roadWidth)\nvar playerZ = null; // player relative z distance from camera (computed)\nvar fogDensity = 5; // exponential fog density\nvar position = 0; // current camera Z position (add playerZ to get player's absolute Z position)\nvar speed = 0; // current speed\nvar maxSpeed = segmentLength / step; // top speed (ensure we can't move more than 1 segment in a single frame to make collision detection easier)\nvar accel = maxSpeed / 5; // acceleration rate - tuned until it 'felt' right\nvar breaking = -maxSpeed; // deceleration rate when braking\nvar decel = -maxSpeed / 5; // 'natural' deceleration rate when neither accelerating, nor braking\nvar offRoadDecel = -maxSpeed / 2; // off road deceleration is somewhere in between\nvar offRoadLimit = maxSpeed / 4; // limit when off road deceleration no longer applies (e.g. you can always go at least this speed even when off road)\n\nvar keyLeft = false;\nvar keyRight = false;\nvar keyFaster = false;\nvar keySlower = false;\n\n//=========================================================================\n// UPDATE THE GAME WORLD\n//=========================================================================\n\nfunction update(dt) {\n\n    position = _util2.default.increase(position, dt * speed, trackLength);\n\n    var dx = dt * 2 * (speed / maxSpeed); // at top speed, should be able to cross from left to right (-1 to 1) in 1 second\n\n    if (keyLeft) {\n        playerX = playerX - dx;\n    } else if (keyRight) {\n        playerX = playerX + dx;\n    }\n\n    if (keyFaster) {\n        speed = _util2.default.accelerate(speed, accel, dt);\n    } else if (keySlower) {\n        speed = _util2.default.accelerate(speed, breaking, dt);\n    } else {\n        speed = _util2.default.accelerate(speed, decel, dt);\n    }\n\n    if ((playerX < -1 || playerX > 1) && speed > offRoadLimit) {\n        speed = _util2.default.accelerate(speed, offRoadDecel, dt);\n    }\n\n    playerX = _util2.default.limit(playerX, -2, 2); // dont ever let player go too far out of bounds\n    speed = _util2.default.limit(speed, 0, maxSpeed); // or exceed maxSpeed\n}\n\n//=========================================================================\n// RENDER THE GAME WORLD\n//=========================================================================\n\nfunction render() {\n\n    var baseSegment = findSegment(position);\n    var maxy = height;\n\n    ctx.clearRect(0, 0, width, height);\n\n    _render2.default.background(ctx, background, width, height, _constants.BACKGROUND.SKY);\n    _render2.default.background(ctx, background, width, height, _constants.BACKGROUND.HILLS);\n    _render2.default.background(ctx, background, width, height, _constants.BACKGROUND.TREES);\n\n    var n, segment;\n\n    for (n = 0; n < drawDistance; n++) {\n\n        segment = segments[(baseSegment.index + n) % segments.length];\n        segment.looped = segment.index < baseSegment.index;\n        segment.fog = _util2.default.exponentialFog(n / drawDistance, fogDensity);\n\n        _util2.default.project(segment.p1, playerX * roadWidth, cameraHeight, position - (segment.looped ? trackLength : 0), cameraDepth, width, height, roadWidth);\n        _util2.default.project(segment.p2, playerX * roadWidth, cameraHeight, position - (segment.looped ? trackLength : 0), cameraDepth, width, height, roadWidth);\n\n        if (segment.p1.camera.z <= cameraDepth || // behind us\n        segment.p2.screen.y >= maxy) {\n            // clip by (already rendered) segment\n            continue;\n        }\n\n        _render2.default.segment(ctx, width, lanes, segment.p1.screen.x, segment.p1.screen.y, segment.p1.screen.w, segment.p2.screen.x, segment.p2.screen.y, segment.p2.screen.w, segment.fog, segment.color);\n\n        maxy = segment.p2.screen.y;\n    }\n\n    _render2.default.player(ctx, width, height, resolution, roadWidth, sprites, speed / maxSpeed, cameraDepth / playerZ, width / 2, height, speed * (keyLeft ? -1 : keyRight ? 1 : 0), 0);\n}\n\n//=========================================================================\n// BUILD ROAD GEOMETRY\n//=========================================================================\n\nfunction resetRoad() {\n    segments = [];\n    for (var n = 0; n < 500; n++) {\n        segments.push({\n            index: n,\n            p1: { world: { z: n * segmentLength }, camera: {}, screen: {} },\n            p2: { world: { z: (n + 1) * segmentLength }, camera: {}, screen: {} },\n            color: Math.floor(n / rumbleLength) % 2 ? _constants.COLORS.DARK : _constants.COLORS.LIGHT\n        });\n    }\n\n    segments[findSegment(playerZ).index + 2].color = _constants.COLORS.START;\n    segments[findSegment(playerZ).index + 3].color = _constants.COLORS.START;\n    for (var _n = 0; _n < rumbleLength; _n++) {\n        segments[segments.length - 1 - _n].color = _constants.COLORS.FINISH;\n    }\n\n    trackLength = segments.length * segmentLength;\n}\n\nfunction findSegment(z) {\n    return segments[Math.floor(z / segmentLength) % segments.length];\n}\n\n//=========================================================================\n// THE GAME LOOP\n//=========================================================================\n\n_game.Game.run({\n    //   canvas: canvas, render: render, update: update, stats: stats, step: step,\n    canvas: canvas, render: render, update: update, stats: stats, step: step,\n    images: [\"background\", \"sprites\"],\n    keys: [{ keys: [_constants.KEY.LEFT, _constants.KEY.A], mode: 'down', action: function action() {\n            keyLeft = true;\n        } }, { keys: [_constants.KEY.RIGHT, _constants.KEY.D], mode: 'down', action: function action() {\n            keyRight = true;\n        } }, { keys: [_constants.KEY.UP, _constants.KEY.W], mode: 'down', action: function action() {\n            keyFaster = true;\n        } }, { keys: [_constants.KEY.DOWN, _constants.KEY.S], mode: 'down', action: function action() {\n            keySlower = true;\n        } }, { keys: [_constants.KEY.LEFT, _constants.KEY.A], mode: 'up', action: function action() {\n            keyLeft = false;\n        } }, { keys: [_constants.KEY.RIGHT, _constants.KEY.D], mode: 'up', action: function action() {\n            keyRight = false;\n        } }, { keys: [_constants.KEY.UP, _constants.KEY.W], mode: 'up', action: function action() {\n            keyFaster = false;\n        } }, { keys: [_constants.KEY.DOWN, _constants.KEY.S], mode: 'up', action: function action() {\n            keySlower = false;\n        } }],\n    ready: function ready(images) {\n        background = images[0];\n        sprites = images[1];\n        reset();\n    }\n});\n\nfunction reset(options) {\n    options = options || {};\n    canvas.width = width = _util2.default.toInt(options.width, width);\n    canvas.height = height = _util2.default.toInt(options.height, height);\n    lanes = _util2.default.toInt(options.lanes, lanes);\n    roadWidth = _util2.default.toInt(options.roadWidth, roadWidth);\n    cameraHeight = _util2.default.toInt(options.cameraHeight, cameraHeight);\n    drawDistance = _util2.default.toInt(options.drawDistance, drawDistance);\n    fogDensity = _util2.default.toInt(options.fogDensity, fogDensity);\n    fieldOfView = _util2.default.toInt(options.fieldOfView, fieldOfView);\n    segmentLength = _util2.default.toInt(options.segmentLength, segmentLength);\n    rumbleLength = _util2.default.toInt(options.rumbleLength, rumbleLength);\n    cameraDepth = 1 / Math.tan(fieldOfView / 2 * Math.PI / 180);\n    playerZ = cameraHeight * cameraDepth;\n    resolution = height / 480;\n    refreshTweakUI();\n\n    if (segments.length == 0 || options.segmentLength || options.rumbleLength) {\n        resetRoad(); // only rebuild road when necessary\n    }\n}\n\n//=========================================================================\n// TWEAK UI HANDLERS\n//=========================================================================\n\n_dom2.default.on('resolution', 'change', function (ev) {\n    var w, h, ratio;\n    switch (ev.target.options[ev.target.selectedIndex].value) {\n        case 'fine':\n            w = 1280;h = 960;ratio = w / width;break;\n        case 'high':\n            w = 1024;h = 768;ratio = w / width;break;\n        case 'medium':\n            w = 640;h = 480;ratio = w / width;break;\n        case 'low':\n            w = 480;h = 360;ratio = w / width;break;\n    }\n    reset({ width: w, height: h });\n    _dom2.default.blur(ev);\n});\n\n_dom2.default.on('lanes', 'change', function (ev) {\n    _dom2.default.blur(ev);reset({ lanes: ev.target.options[ev.target.selectedIndex].value });\n});\n_dom2.default.on('roadWidth', 'change', function (ev) {\n    _dom2.default.blur(ev);reset({ roadWidth: _util2.default.limit(_util2.default.toInt(ev.target.value), _util2.default.toInt(ev.target.getAttribute('min')), _util2.default.toInt(ev.target.getAttribute('max'))) });\n});\n_dom2.default.on('cameraHeight', 'change', function (ev) {\n    _dom2.default.blur(ev);reset({ cameraHeight: _util2.default.limit(_util2.default.toInt(ev.target.value), _util2.default.toInt(ev.target.getAttribute('min')), _util2.default.toInt(ev.target.getAttribute('max'))) });\n});\n_dom2.default.on('drawDistance', 'change', function (ev) {\n    _dom2.default.blur(ev);reset({ drawDistance: _util2.default.limit(_util2.default.toInt(ev.target.value), _util2.default.toInt(ev.target.getAttribute('min')), _util2.default.toInt(ev.target.getAttribute('max'))) });\n});\n_dom2.default.on('fieldOfView', 'change', function (ev) {\n    _dom2.default.blur(ev);reset({ fieldOfView: _util2.default.limit(_util2.default.toInt(ev.target.value), _util2.default.toInt(ev.target.getAttribute('min')), _util2.default.toInt(ev.target.getAttribute('max'))) });\n});\n_dom2.default.on('fogDensity', 'change', function (ev) {\n    _dom2.default.blur(ev);reset({ fogDensity: _util2.default.limit(_util2.default.toInt(ev.target.value), _util2.default.toInt(ev.target.getAttribute('min')), _util2.default.toInt(ev.target.getAttribute('max'))) });\n});\n\nfunction refreshTweakUI() {\n    _dom2.default.get('lanes').selectedIndex = lanes - 1;\n    _dom2.default.get('currentRoadWidth').innerHTML = _dom2.default.get('roadWidth').value = roadWidth;\n    _dom2.default.get('currentCameraHeight').innerHTML = _dom2.default.get('cameraHeight').value = cameraHeight;\n    _dom2.default.get('currentDrawDistance').innerHTML = _dom2.default.get('drawDistance').value = drawDistance;\n    _dom2.default.get('currentFieldOfView').innerHTML = _dom2.default.get('fieldOfView').value = fieldOfView;\n    _dom2.default.get('currentFogDensity').innerHTML = _dom2.default.get('fogDensity').value = fogDensity;\n}\n\n//=========================================================================\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvYXBwLmpzPzcxYjQiXSwibmFtZXMiOlsiY29uc29sZSIsImxvZyIsImZwcyIsInN0ZXAiLCJ3aWR0aCIsImhlaWdodCIsInNlZ21lbnRzIiwic3RhdHMiLCJjYW52YXMiLCJnZXQiLCJjdHgiLCJnZXRDb250ZXh0IiwiYmFja2dyb3VuZCIsInNwcml0ZXMiLCJyZXNvbHV0aW9uIiwicm9hZFdpZHRoIiwic2VnbWVudExlbmd0aCIsInJ1bWJsZUxlbmd0aCIsInRyYWNrTGVuZ3RoIiwibGFuZXMiLCJmaWVsZE9mVmlldyIsImNhbWVyYUhlaWdodCIsImNhbWVyYURlcHRoIiwiZHJhd0Rpc3RhbmNlIiwicGxheWVyWCIsInBsYXllcloiLCJmb2dEZW5zaXR5IiwicG9zaXRpb24iLCJzcGVlZCIsIm1heFNwZWVkIiwiYWNjZWwiLCJicmVha2luZyIsImRlY2VsIiwib2ZmUm9hZERlY2VsIiwib2ZmUm9hZExpbWl0Iiwia2V5TGVmdCIsImtleVJpZ2h0Iiwia2V5RmFzdGVyIiwia2V5U2xvd2VyIiwidXBkYXRlIiwiZHQiLCJpbmNyZWFzZSIsImR4IiwiYWNjZWxlcmF0ZSIsImxpbWl0IiwicmVuZGVyIiwiYmFzZVNlZ21lbnQiLCJmaW5kU2VnbWVudCIsIm1heHkiLCJjbGVhclJlY3QiLCJTS1kiLCJISUxMUyIsIlRSRUVTIiwibiIsInNlZ21lbnQiLCJpbmRleCIsImxlbmd0aCIsImxvb3BlZCIsImZvZyIsImV4cG9uZW50aWFsRm9nIiwicHJvamVjdCIsInAxIiwicDIiLCJjYW1lcmEiLCJ6Iiwic2NyZWVuIiwieSIsIngiLCJ3IiwiY29sb3IiLCJwbGF5ZXIiLCJyZXNldFJvYWQiLCJwdXNoIiwid29ybGQiLCJNYXRoIiwiZmxvb3IiLCJEQVJLIiwiTElHSFQiLCJTVEFSVCIsIkZJTklTSCIsInJ1biIsImltYWdlcyIsImtleXMiLCJMRUZUIiwiQSIsIm1vZGUiLCJhY3Rpb24iLCJSSUdIVCIsIkQiLCJVUCIsIlciLCJET1dOIiwiUyIsInJlYWR5IiwicmVzZXQiLCJvcHRpb25zIiwidG9JbnQiLCJ0YW4iLCJQSSIsInJlZnJlc2hUd2Vha1VJIiwib24iLCJldiIsImgiLCJyYXRpbyIsInRhcmdldCIsInNlbGVjdGVkSW5kZXgiLCJ2YWx1ZSIsImJsdXIiLCJnZXRBdHRyaWJ1dGUiLCJpbm5lckhUTUwiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBOztBQUVJQSxRQUFRQyxHQUFSLENBQVksaUJBQVo7O0FBRUFELFFBQVFDLEdBQVIsQ0FBWSxPQUFaO0FBQ0FELFFBQVFDLEdBQVIsQ0FBWSxPQUFaO0FBQ0FELFFBQVFDLEdBQVIsQ0FBWSxPQUFaO0FBQ0FELFFBQVFDLEdBQVIsQ0FBWSxRQUFaO0FBQ0FELFFBQVFDLEdBQVIsQ0FBWSxRQUFaO0FBQ0FELFFBQVFDLEdBQVIsQ0FBWSxVQUFaOztBQUVBLElBQUlDLE1BQWdCLEVBQXBCLEMsQ0FBNkM7QUFDN0MsSUFBSUMsT0FBZ0IsSUFBRUQsR0FBdEIsQyxDQUE2QztBQUM3QyxJQUFJRSxRQUFnQixJQUFwQixDLENBQTZDO0FBQzdDLElBQUlDLFNBQWdCLEdBQXBCLEMsQ0FBNkM7QUFDN0MsSUFBSUMsV0FBZ0IsRUFBcEIsQyxDQUE2QztBQUM3QyxJQUFJQyxRQUFnQixXQUFLQSxLQUFMLENBQVcsS0FBWCxDQUFwQixDLENBQTZDO0FBQzdDLElBQUlDLFNBQWdCLGNBQUlDLEdBQUosQ0FBUSxRQUFSLENBQXBCLEMsQ0FBNkM7QUFDN0MsSUFBSUMsTUFBZ0JGLE9BQU9HLFVBQVAsQ0FBa0IsSUFBbEIsQ0FBcEIsQyxDQUE2QztBQUM3QyxJQUFJQyxhQUFnQixJQUFwQixDLENBQTZDO0FBQzdDLElBQUlDLFVBQWdCLElBQXBCLEMsQ0FBNkM7QUFDN0MsSUFBSUMsYUFBZ0IsSUFBcEIsQyxDQUE2QztBQUM3QyxJQUFJQyxZQUFnQixJQUFwQixDLENBQTZDO0FBQzdDLElBQUlDLGdCQUFnQixHQUFwQixD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Jy4vbW9kdWxlcy9jb25zdGFudHMnO1xyXG5pbXBvcnQgRG9tIGZyb20gJy4vbW9kdWxlcy9kb20nO1xyXG5pbXBvcnQgUmFmIGZyb20gJy4vbW9kdWxlcy9yYWYnO1xyXG5pbXBvcnQgVXRpbCBmcm9tICcuL21vZHVsZXMvdXRpbCc7XHJcbmltcG9ydCB7R2FtZX0gZnJvbSAnLi9tb2R1bGVzL2dhbWUnO1xyXG5pbXBvcnQgUmVuZGVyIGZyb20gJy4vbW9kdWxlcy9yZW5kZXInO1xyXG5cclxuUmFmKCk7XHJcblxyXG4gICAgY29uc29sZS5sb2coJ1dlIGFyZSB3b3JraW5nIScpO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCdLRVk6ICcsS0VZKTtcclxuICAgIGNvbnNvbGUubG9nKCdEb206ICcsRG9tKTtcclxuICAgIGNvbnNvbGUubG9nKCdSYWY6ICcsUmFmKTtcclxuICAgIGNvbnNvbGUubG9nKCdVdGlsOiAnLFV0aWwpO1xyXG4gICAgY29uc29sZS5sb2coJ0dhbWU6ICcsR2FtZSk7XHJcbiAgICBjb25zb2xlLmxvZygnUmVuZGVyOiAnLFJlbmRlcik7XHJcblxyXG4gICAgdmFyIGZwcyAgICAgICAgICAgPSA2MDsgICAgICAgICAgICAgICAgICAgICAgLy8gaG93IG1hbnkgJ3VwZGF0ZScgZnJhbWVzIHBlciBzZWNvbmRcclxuICAgIHZhciBzdGVwICAgICAgICAgID0gMS9mcHM7ICAgICAgICAgICAgICAgICAgIC8vIGhvdyBsb25nIGlzIGVhY2ggZnJhbWUgKGluIHNlY29uZHMpXHJcbiAgICB2YXIgd2lkdGggICAgICAgICA9IDEwMjQ7ICAgICAgICAgICAgICAgICAgICAvLyBsb2dpY2FsIGNhbnZhcyB3aWR0aFxyXG4gICAgdmFyIGhlaWdodCAgICAgICAgPSA3Njg7ICAgICAgICAgICAgICAgICAgICAgLy8gbG9naWNhbCBjYW52YXMgaGVpZ2h0XHJcbiAgICB2YXIgc2VnbWVudHMgICAgICA9IFtdOyAgICAgICAgICAgICAgICAgICAgICAvLyBhcnJheSBvZiByb2FkIHNlZ21lbnRzXHJcbiAgICB2YXIgc3RhdHMgICAgICAgICA9IEdhbWUuc3RhdHMoJ2ZwcycpOyAgICAgICAvLyBtci5kb29icyBGUFMgY291bnRlclxyXG4gICAgdmFyIGNhbnZhcyAgICAgICAgPSBEb20uZ2V0KCdjYW52YXMnKTsgICAgICAgLy8gb3VyIGNhbnZhcy4uLlxyXG4gICAgdmFyIGN0eCAgICAgICAgICAgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTsgLy8gLi4uYW5kIGl0cyBkcmF3aW5nIGNvbnRleHRcclxuICAgIHZhciBiYWNrZ3JvdW5kICAgID0gbnVsbDsgICAgICAgICAgICAgICAgICAgIC8vIG91ciBiYWNrZ3JvdW5kIGltYWdlIChsb2FkZWQgYmVsb3cpXHJcbiAgICB2YXIgc3ByaXRlcyAgICAgICA9IG51bGw7ICAgICAgICAgICAgICAgICAgICAvLyBvdXIgc3ByaXRlc2hlZXQgKGxvYWRlZCBiZWxvdylcclxuICAgIHZhciByZXNvbHV0aW9uICAgID0gbnVsbDsgICAgICAgICAgICAgICAgICAgIC8vIHNjYWxpbmcgZmFjdG9yIHRvIHByb3ZpZGUgcmVzb2x1dGlvbiBpbmRlcGVuZGVuY2UgKGNvbXB1dGVkKVxyXG4gICAgdmFyIHJvYWRXaWR0aCAgICAgPSAyMDAwOyAgICAgICAgICAgICAgICAgICAgLy8gYWN0dWFsbHkgaGFsZiB0aGUgcm9hZHMgd2lkdGgsIGVhc2llciBtYXRoIGlmIHRoZSByb2FkIHNwYW5zIGZyb20gLXJvYWRXaWR0aCB0byArcm9hZFdpZHRoXHJcbiAgICB2YXIgc2VnbWVudExlbmd0aCA9IDIwMDsgICAgICAgICAgICAgICAgICAgICAvLyBsZW5ndGggb2YgYSBzaW5nbGUgc2VnbWVudFxyXG4gICAgdmFyIHJ1bWJsZUxlbmd0aCAgPSAzOyAgICAgICAgICAgICAgICAgICAgICAgLy8gbnVtYmVyIG9mIHNlZ21lbnRzIHBlciByZWQvd2hpdGUgcnVtYmxlIHN0cmlwXHJcbiAgICB2YXIgdHJhY2tMZW5ndGggICA9IG51bGw7ICAgICAgICAgICAgICAgICAgICAvLyB6IGxlbmd0aCBvZiBlbnRpcmUgdHJhY2sgKGNvbXB1dGVkKVxyXG4gICAgdmFyIGxhbmVzICAgICAgICAgPSAzOyAgICAgICAgICAgICAgICAgICAgICAgLy8gbnVtYmVyIG9mIGxhbmVzXHJcbiAgICB2YXIgZmllbGRPZlZpZXcgICA9IDEwMDsgICAgICAgICAgICAgICAgICAgICAvLyBhbmdsZSAoZGVncmVlcykgZm9yIGZpZWxkIG9mIHZpZXdcclxuICAgIHZhciBjYW1lcmFIZWlnaHQgID0gMTAwMDsgICAgICAgICAgICAgICAgICAgIC8vIHogaGVpZ2h0IG9mIGNhbWVyYVxyXG4gICAgdmFyIGNhbWVyYURlcHRoICAgPSBudWxsOyAgICAgICAgICAgICAgICAgICAgLy8geiBkaXN0YW5jZSBjYW1lcmEgaXMgZnJvbSBzY3JlZW4gKGNvbXB1dGVkKVxyXG4gICAgdmFyIGRyYXdEaXN0YW5jZSAgPSAzMDA7ICAgICAgICAgICAgICAgICAgICAgLy8gbnVtYmVyIG9mIHNlZ21lbnRzIHRvIGRyYXdcclxuICAgIHZhciBwbGF5ZXJYICAgICAgID0gMDsgICAgICAgICAgICAgICAgICAgICAgIC8vIHBsYXllciB4IG9mZnNldCBmcm9tIGNlbnRlciBvZiByb2FkICgtMSB0byAxIHRvIHN0YXkgaW5kZXBlbmRlbnQgb2Ygcm9hZFdpZHRoKVxyXG4gICAgdmFyIHBsYXllclogICAgICAgPSBudWxsOyAgICAgICAgICAgICAgICAgICAgLy8gcGxheWVyIHJlbGF0aXZlIHogZGlzdGFuY2UgZnJvbSBjYW1lcmEgKGNvbXB1dGVkKVxyXG4gICAgdmFyIGZvZ0RlbnNpdHkgICAgPSA1OyAgICAgICAgICAgICAgICAgICAgICAgLy8gZXhwb25lbnRpYWwgZm9nIGRlbnNpdHlcclxuICAgIHZhciBwb3NpdGlvbiAgICAgID0gMDsgICAgICAgICAgICAgICAgICAgICAgIC8vIGN1cnJlbnQgY2FtZXJhIFogcG9zaXRpb24gKGFkZCBwbGF5ZXJaIHRvIGdldCBwbGF5ZXIncyBhYnNvbHV0ZSBaIHBvc2l0aW9uKVxyXG4gICAgdmFyIHNwZWVkICAgICAgICAgPSAwOyAgICAgICAgICAgICAgICAgICAgICAgLy8gY3VycmVudCBzcGVlZFxyXG4gICAgdmFyIG1heFNwZWVkICAgICAgPSBzZWdtZW50TGVuZ3RoL3N0ZXA7ICAgICAgLy8gdG9wIHNwZWVkIChlbnN1cmUgd2UgY2FuJ3QgbW92ZSBtb3JlIHRoYW4gMSBzZWdtZW50IGluIGEgc2luZ2xlIGZyYW1lIHRvIG1ha2UgY29sbGlzaW9uIGRldGVjdGlvbiBlYXNpZXIpXHJcbiAgICB2YXIgYWNjZWwgICAgICAgICA9ICBtYXhTcGVlZC81OyAgICAgICAgICAgICAvLyBhY2NlbGVyYXRpb24gcmF0ZSAtIHR1bmVkIHVudGlsIGl0ICdmZWx0JyByaWdodFxyXG4gICAgdmFyIGJyZWFraW5nICAgICAgPSAtbWF4U3BlZWQ7ICAgICAgICAgICAgICAgLy8gZGVjZWxlcmF0aW9uIHJhdGUgd2hlbiBicmFraW5nXHJcbiAgICB2YXIgZGVjZWwgICAgICAgICA9IC1tYXhTcGVlZC81OyAgICAgICAgICAgICAvLyAnbmF0dXJhbCcgZGVjZWxlcmF0aW9uIHJhdGUgd2hlbiBuZWl0aGVyIGFjY2VsZXJhdGluZywgbm9yIGJyYWtpbmdcclxuICAgIHZhciBvZmZSb2FkRGVjZWwgID0gLW1heFNwZWVkLzI7ICAgICAgICAgICAgIC8vIG9mZiByb2FkIGRlY2VsZXJhdGlvbiBpcyBzb21ld2hlcmUgaW4gYmV0d2VlblxyXG4gICAgdmFyIG9mZlJvYWRMaW1pdCAgPSAgbWF4U3BlZWQvNDsgICAgICAgICAgICAgLy8gbGltaXQgd2hlbiBvZmYgcm9hZCBkZWNlbGVyYXRpb24gbm8gbG9uZ2VyIGFwcGxpZXMgKGUuZy4geW91IGNhbiBhbHdheXMgZ28gYXQgbGVhc3QgdGhpcyBzcGVlZCBldmVuIHdoZW4gb2ZmIHJvYWQpXHJcblxyXG4gICAgdmFyIGtleUxlZnQgICAgICAgPSBmYWxzZTtcclxuICAgIHZhciBrZXlSaWdodCAgICAgID0gZmFsc2U7XHJcbiAgICB2YXIga2V5RmFzdGVyICAgICA9IGZhbHNlO1xyXG4gICAgdmFyIGtleVNsb3dlciAgICAgPSBmYWxzZTtcclxuXHJcbiAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgIC8vIFVQREFURSBUSEUgR0FNRSBXT1JMRFxyXG4gICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgZnVuY3Rpb24gdXBkYXRlKGR0KSB7XHJcblxyXG4gICAgICBwb3NpdGlvbiA9IFV0aWwuaW5jcmVhc2UocG9zaXRpb24sIGR0ICogc3BlZWQsIHRyYWNrTGVuZ3RoKTtcclxuXHJcbiAgICAgIHZhciBkeCA9IGR0ICogMiAqIChzcGVlZC9tYXhTcGVlZCk7IC8vIGF0IHRvcCBzcGVlZCwgc2hvdWxkIGJlIGFibGUgdG8gY3Jvc3MgZnJvbSBsZWZ0IHRvIHJpZ2h0ICgtMSB0byAxKSBpbiAxIHNlY29uZFxyXG5cclxuICAgICAgaWYgKGtleUxlZnQpIHtcclxuICAgICAgICBwbGF5ZXJYID0gcGxheWVyWCAtIGR4O1xyXG4gICAgICB9IGVsc2UgaWYgKGtleVJpZ2h0KSB7XHJcbiAgICAgICAgcGxheWVyWCA9IHBsYXllclggKyBkeDtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGtleUZhc3Rlcikge1xyXG4gICAgICAgIHNwZWVkID0gVXRpbC5hY2NlbGVyYXRlKHNwZWVkLCBhY2NlbCwgZHQpO1xyXG4gICAgICB9IGVsc2UgaWYgKGtleVNsb3dlcikge1xyXG4gICAgICAgIHNwZWVkID0gVXRpbC5hY2NlbGVyYXRlKHNwZWVkLCBicmVha2luZywgZHQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNwZWVkID0gVXRpbC5hY2NlbGVyYXRlKHNwZWVkLCBkZWNlbCwgZHQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoKChwbGF5ZXJYIDwgLTEpIHx8IChwbGF5ZXJYID4gMSkpICYmIChzcGVlZCA+IG9mZlJvYWRMaW1pdCkpIHtcclxuICAgICAgICBzcGVlZCA9IFV0aWwuYWNjZWxlcmF0ZShzcGVlZCwgb2ZmUm9hZERlY2VsLCBkdCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHBsYXllclggPSBVdGlsLmxpbWl0KHBsYXllclgsIC0yLCAyKTsgICAgIC8vIGRvbnQgZXZlciBsZXQgcGxheWVyIGdvIHRvbyBmYXIgb3V0IG9mIGJvdW5kc1xyXG4gICAgICBzcGVlZCAgID0gVXRpbC5saW1pdChzcGVlZCwgMCwgbWF4U3BlZWQpOyAvLyBvciBleGNlZWQgbWF4U3BlZWRcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICAvLyBSRU5ERVIgVEhFIEdBTUUgV09STERcclxuICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlbmRlcigpIHtcclxuXHJcbiAgICAgIHZhciBiYXNlU2VnbWVudCA9IGZpbmRTZWdtZW50KHBvc2l0aW9uKTtcclxuICAgICAgdmFyIG1heHkgICAgICAgID0gaGVpZ2h0O1xyXG5cclxuICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcclxuXHJcbiAgICAgIFJlbmRlci5iYWNrZ3JvdW5kKGN0eCwgYmFja2dyb3VuZCwgd2lkdGgsIGhlaWdodCwgQkFDS0dST1VORC5TS1kpO1xyXG4gICAgICBSZW5kZXIuYmFja2dyb3VuZChjdHgsIGJhY2tncm91bmQsIHdpZHRoLCBoZWlnaHQsIEJBQ0tHUk9VTkQuSElMTFMpO1xyXG4gICAgICBSZW5kZXIuYmFja2dyb3VuZChjdHgsIGJhY2tncm91bmQsIHdpZHRoLCBoZWlnaHQsIEJBQ0tHUk9VTkQuVFJFRVMpO1xyXG5cclxuICAgICAgdmFyIG4sIHNlZ21lbnQ7XHJcblxyXG4gICAgICBmb3IobiA9IDAgOyBuIDwgZHJhd0Rpc3RhbmNlIDsgbisrKSB7XHJcblxyXG4gICAgICAgIHNlZ21lbnQgICAgICAgID0gc2VnbWVudHNbKGJhc2VTZWdtZW50LmluZGV4ICsgbikgJSBzZWdtZW50cy5sZW5ndGhdO1xyXG4gICAgICAgIHNlZ21lbnQubG9vcGVkID0gc2VnbWVudC5pbmRleCA8IGJhc2VTZWdtZW50LmluZGV4O1xyXG4gICAgICAgIHNlZ21lbnQuZm9nICAgID0gVXRpbC5leHBvbmVudGlhbEZvZyhuL2RyYXdEaXN0YW5jZSwgZm9nRGVuc2l0eSk7XHJcblxyXG4gICAgICAgIFV0aWwucHJvamVjdChzZWdtZW50LnAxLCAocGxheWVyWCAqIHJvYWRXaWR0aCksIGNhbWVyYUhlaWdodCwgcG9zaXRpb24gLSAoc2VnbWVudC5sb29wZWQgPyB0cmFja0xlbmd0aCA6IDApLCBjYW1lcmFEZXB0aCwgd2lkdGgsIGhlaWdodCwgcm9hZFdpZHRoKTtcclxuICAgICAgICBVdGlsLnByb2plY3Qoc2VnbWVudC5wMiwgKHBsYXllclggKiByb2FkV2lkdGgpLCBjYW1lcmFIZWlnaHQsIHBvc2l0aW9uIC0gKHNlZ21lbnQubG9vcGVkID8gdHJhY2tMZW5ndGggOiAwKSwgY2FtZXJhRGVwdGgsIHdpZHRoLCBoZWlnaHQsIHJvYWRXaWR0aCk7XHJcblxyXG4gICAgICAgIGlmICgoc2VnbWVudC5wMS5jYW1lcmEueiA8PSBjYW1lcmFEZXB0aCkgfHwgLy8gYmVoaW5kIHVzXHJcbiAgICAgICAgICAgIChzZWdtZW50LnAyLnNjcmVlbi55ID49IG1heHkpKSB7ICAgICAgICAgIC8vIGNsaXAgYnkgKGFscmVhZHkgcmVuZGVyZWQpIHNlZ21lbnRcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgUmVuZGVyLnNlZ21lbnQoY3R4LCB3aWR0aCwgbGFuZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudC5wMS5zY3JlZW4ueCxcclxuICAgICAgICAgICAgICAgICAgICAgICBzZWdtZW50LnAxLnNjcmVlbi55LFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHNlZ21lbnQucDEuc2NyZWVuLncsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudC5wMi5zY3JlZW4ueCxcclxuICAgICAgICAgICAgICAgICAgICAgICBzZWdtZW50LnAyLnNjcmVlbi55LFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHNlZ21lbnQucDIuc2NyZWVuLncsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudC5mb2csXHJcbiAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudC5jb2xvcik7XHJcblxyXG4gICAgICAgIG1heHkgPSBzZWdtZW50LnAyLnNjcmVlbi55O1xyXG4gICAgICB9XHJcblxyXG4gICAgICBSZW5kZXIucGxheWVyKGN0eCwgd2lkdGgsIGhlaWdodCwgcmVzb2x1dGlvbiwgcm9hZFdpZHRoLCBzcHJpdGVzLCBzcGVlZC9tYXhTcGVlZCxcclxuICAgICAgICAgICAgICAgICAgICBjYW1lcmFEZXB0aC9wbGF5ZXJaLFxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoLzIsXHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgICAgIHNwZWVkICogKGtleUxlZnQgPyAtMSA6IGtleVJpZ2h0ID8gMSA6IDApLFxyXG4gICAgICAgICAgICAgICAgICAgIDApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgLy8gQlVJTEQgUk9BRCBHRU9NRVRSWVxyXG4gICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgZnVuY3Rpb24gcmVzZXRSb2FkKCkge1xyXG4gICAgICBzZWdtZW50cyA9IFtdO1xyXG4gICAgICBmb3IodmFyIG4gPSAwIDsgbiA8IDUwMCA7IG4rKykge1xyXG4gICAgICAgIHNlZ21lbnRzLnB1c2goe1xyXG4gICAgICAgICAgIGluZGV4OiBuLFxyXG4gICAgICAgICAgIHAxOiB7IHdvcmxkOiB7IHo6ICBuICAgKnNlZ21lbnRMZW5ndGggfSwgY2FtZXJhOiB7fSwgc2NyZWVuOiB7fSB9LFxyXG4gICAgICAgICAgIHAyOiB7IHdvcmxkOiB7IHo6IChuKzEpKnNlZ21lbnRMZW5ndGggfSwgY2FtZXJhOiB7fSwgc2NyZWVuOiB7fSB9LFxyXG4gICAgICAgICAgIGNvbG9yOiBNYXRoLmZsb29yKG4vcnVtYmxlTGVuZ3RoKSUyID8gQ09MT1JTLkRBUksgOiBDT0xPUlMuTElHSFRcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2VnbWVudHNbZmluZFNlZ21lbnQocGxheWVyWikuaW5kZXggKyAyXS5jb2xvciA9IENPTE9SUy5TVEFSVDtcclxuICAgICAgc2VnbWVudHNbZmluZFNlZ21lbnQocGxheWVyWikuaW5kZXggKyAzXS5jb2xvciA9IENPTE9SUy5TVEFSVDtcclxuICAgICAgZm9yKGxldCBuID0gMCA7IG4gPCBydW1ibGVMZW5ndGggOyBuKyspIHtcclxuICAgICAgICBzZWdtZW50c1tzZWdtZW50cy5sZW5ndGgtMS1uXS5jb2xvciA9IENPTE9SUy5GSU5JU0g7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRyYWNrTGVuZ3RoID0gc2VnbWVudHMubGVuZ3RoICogc2VnbWVudExlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBmaW5kU2VnbWVudCh6KSB7XHJcbiAgICAgIHJldHVybiBzZWdtZW50c1tNYXRoLmZsb29yKHovc2VnbWVudExlbmd0aCkgJSBzZWdtZW50cy5sZW5ndGhdO1xyXG4gICAgfVxyXG5cclxuICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgLy8gVEhFIEdBTUUgTE9PUFxyXG4gICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgR2FtZS5ydW4oe1xyXG4gICAgLy8gICBjYW52YXM6IGNhbnZhcywgcmVuZGVyOiByZW5kZXIsIHVwZGF0ZTogdXBkYXRlLCBzdGF0czogc3RhdHMsIHN0ZXA6IHN0ZXAsXHJcbiAgICBjYW52YXM6IGNhbnZhcywgcmVuZGVyOiByZW5kZXIsIHVwZGF0ZTogdXBkYXRlLCBzdGF0czogc3RhdHMsIHN0ZXA6IHN0ZXAsXHJcbiAgICAgIGltYWdlczogW1wiYmFja2dyb3VuZFwiLCBcInNwcml0ZXNcIl0sXHJcbiAgICAgIGtleXM6IFtcclxuICAgICAgICB7IGtleXM6IFtLRVkuTEVGVCwgIEtFWS5BXSwgbW9kZTogJ2Rvd24nLCBhY3Rpb246IGZ1bmN0aW9uKCkgeyBrZXlMZWZ0ICAgPSB0cnVlOyAgfSB9LFxyXG4gICAgICAgIHsga2V5czogW0tFWS5SSUdIVCwgS0VZLkRdLCBtb2RlOiAnZG93bicsIGFjdGlvbjogZnVuY3Rpb24oKSB7IGtleVJpZ2h0ICA9IHRydWU7ICB9IH0sXHJcbiAgICAgICAgeyBrZXlzOiBbS0VZLlVQLCAgICBLRVkuV10sIG1vZGU6ICdkb3duJywgYWN0aW9uOiBmdW5jdGlvbigpIHsga2V5RmFzdGVyID0gdHJ1ZTsgIH0gfSxcclxuICAgICAgICB7IGtleXM6IFtLRVkuRE9XTiwgIEtFWS5TXSwgbW9kZTogJ2Rvd24nLCBhY3Rpb246IGZ1bmN0aW9uKCkgeyBrZXlTbG93ZXIgPSB0cnVlOyAgfSB9LFxyXG4gICAgICAgIHsga2V5czogW0tFWS5MRUZULCAgS0VZLkFdLCBtb2RlOiAndXAnLCAgIGFjdGlvbjogZnVuY3Rpb24oKSB7IGtleUxlZnQgICA9IGZhbHNlOyB9IH0sXHJcbiAgICAgICAgeyBrZXlzOiBbS0VZLlJJR0hULCBLRVkuRF0sIG1vZGU6ICd1cCcsICAgYWN0aW9uOiBmdW5jdGlvbigpIHsga2V5UmlnaHQgID0gZmFsc2U7IH0gfSxcclxuICAgICAgICB7IGtleXM6IFtLRVkuVVAsICAgIEtFWS5XXSwgbW9kZTogJ3VwJywgICBhY3Rpb246IGZ1bmN0aW9uKCkgeyBrZXlGYXN0ZXIgPSBmYWxzZTsgfSB9LFxyXG4gICAgICAgIHsga2V5czogW0tFWS5ET1dOLCAgS0VZLlNdLCBtb2RlOiAndXAnLCAgIGFjdGlvbjogZnVuY3Rpb24oKSB7IGtleVNsb3dlciA9IGZhbHNlOyB9IH1cclxuICAgICAgXSxcclxuICAgICAgcmVhZHk6IGZ1bmN0aW9uKGltYWdlcykge1xyXG4gICAgICAgIGJhY2tncm91bmQgPSBpbWFnZXNbMF07XHJcbiAgICAgICAgc3ByaXRlcyAgICA9IGltYWdlc1sxXTtcclxuICAgICAgICByZXNldCgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiByZXNldChvcHRpb25zKSB7XHJcbiAgICAgIG9wdGlvbnMgICAgICAgPSBvcHRpb25zIHx8IHt9O1xyXG4gICAgICBjYW52YXMud2lkdGggID0gd2lkdGggID0gVXRpbC50b0ludChvcHRpb25zLndpZHRoLCAgICAgICAgICB3aWR0aCk7XHJcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQgPSBVdGlsLnRvSW50KG9wdGlvbnMuaGVpZ2h0LCAgICAgICAgIGhlaWdodCk7XHJcbiAgICAgIGxhbmVzICAgICAgICAgICAgICAgICAgPSBVdGlsLnRvSW50KG9wdGlvbnMubGFuZXMsICAgICAgICAgIGxhbmVzKTtcclxuICAgICAgcm9hZFdpZHRoICAgICAgICAgICAgICA9IFV0aWwudG9JbnQob3B0aW9ucy5yb2FkV2lkdGgsICAgICAgcm9hZFdpZHRoKTtcclxuICAgICAgY2FtZXJhSGVpZ2h0ICAgICAgICAgICA9IFV0aWwudG9JbnQob3B0aW9ucy5jYW1lcmFIZWlnaHQsICAgY2FtZXJhSGVpZ2h0KTtcclxuICAgICAgZHJhd0Rpc3RhbmNlICAgICAgICAgICA9IFV0aWwudG9JbnQob3B0aW9ucy5kcmF3RGlzdGFuY2UsICAgZHJhd0Rpc3RhbmNlKTtcclxuICAgICAgZm9nRGVuc2l0eSAgICAgICAgICAgICA9IFV0aWwudG9JbnQob3B0aW9ucy5mb2dEZW5zaXR5LCAgICAgZm9nRGVuc2l0eSk7XHJcbiAgICAgIGZpZWxkT2ZWaWV3ICAgICAgICAgICAgPSBVdGlsLnRvSW50KG9wdGlvbnMuZmllbGRPZlZpZXcsICAgIGZpZWxkT2ZWaWV3KTtcclxuICAgICAgc2VnbWVudExlbmd0aCAgICAgICAgICA9IFV0aWwudG9JbnQob3B0aW9ucy5zZWdtZW50TGVuZ3RoLCAgc2VnbWVudExlbmd0aCk7XHJcbiAgICAgIHJ1bWJsZUxlbmd0aCAgICAgICAgICAgPSBVdGlsLnRvSW50KG9wdGlvbnMucnVtYmxlTGVuZ3RoLCAgIHJ1bWJsZUxlbmd0aCk7XHJcbiAgICAgIGNhbWVyYURlcHRoICAgICAgICAgICAgPSAxIC8gTWF0aC50YW4oKGZpZWxkT2ZWaWV3LzIpICogTWF0aC5QSS8xODApO1xyXG4gICAgICBwbGF5ZXJaICAgICAgICAgICAgICAgID0gKGNhbWVyYUhlaWdodCAqIGNhbWVyYURlcHRoKTtcclxuICAgICAgcmVzb2x1dGlvbiAgICAgICAgICAgICA9IGhlaWdodC80ODA7XHJcbiAgICAgIHJlZnJlc2hUd2Vha1VJKCk7XHJcblxyXG4gICAgICAgIGlmICgoc2VnbWVudHMubGVuZ3RoPT0wKSB8fCAob3B0aW9ucy5zZWdtZW50TGVuZ3RoKSB8fCAob3B0aW9ucy5ydW1ibGVMZW5ndGgpKSB7XHJcbiAgICAgICAgICAgIHJlc2V0Um9hZCgpOyAvLyBvbmx5IHJlYnVpbGQgcm9hZCB3aGVuIG5lY2Vzc2FyeVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgIC8vIFRXRUFLIFVJIEhBTkRMRVJTXHJcbiAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBEb20ub24oJ3Jlc29sdXRpb24nLCAnY2hhbmdlJywgZnVuY3Rpb24oZXYpIHtcclxuICAgICAgdmFyIHcsIGgsIHJhdGlvO1xyXG4gICAgICBzd2l0Y2goZXYudGFyZ2V0Lm9wdGlvbnNbZXYudGFyZ2V0LnNlbGVjdGVkSW5kZXhdLnZhbHVlKSB7XHJcbiAgICAgICAgY2FzZSAnZmluZSc6ICAgdyA9IDEyODA7IGggPSA5NjA7ICByYXRpbz13L3dpZHRoOyBicmVhaztcclxuICAgICAgICBjYXNlICdoaWdoJzogICB3ID0gMTAyNDsgaCA9IDc2ODsgIHJhdGlvPXcvd2lkdGg7IGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ21lZGl1bSc6IHcgPSA2NDA7ICBoID0gNDgwOyAgcmF0aW89dy93aWR0aDsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnbG93JzogICAgdyA9IDQ4MDsgIGggPSAzNjA7ICByYXRpbz13L3dpZHRoOyBicmVhaztcclxuICAgICAgfVxyXG4gICAgICByZXNldCh7IHdpZHRoOiB3LCBoZWlnaHQ6IGggfSk7XHJcbiAgICAgIERvbS5ibHVyKGV2KTtcclxuICAgIH0pO1xyXG5cclxuICAgIERvbS5vbignbGFuZXMnLCAgICAgICAgICAnY2hhbmdlJywgZnVuY3Rpb24oZXYpIHsgRG9tLmJsdXIoZXYpOyByZXNldCh7IGxhbmVzOiAgICAgICAgIGV2LnRhcmdldC5vcHRpb25zW2V2LnRhcmdldC5zZWxlY3RlZEluZGV4XS52YWx1ZSB9KTsgfSk7XHJcbiAgICBEb20ub24oJ3JvYWRXaWR0aCcsICAgICAgJ2NoYW5nZScsIGZ1bmN0aW9uKGV2KSB7IERvbS5ibHVyKGV2KTsgcmVzZXQoeyByb2FkV2lkdGg6ICAgICBVdGlsLmxpbWl0KFV0aWwudG9JbnQoZXYudGFyZ2V0LnZhbHVlKSwgVXRpbC50b0ludChldi50YXJnZXQuZ2V0QXR0cmlidXRlKCdtaW4nKSksIFV0aWwudG9JbnQoZXYudGFyZ2V0LmdldEF0dHJpYnV0ZSgnbWF4JykpKSB9KTsgfSk7XHJcbiAgICBEb20ub24oJ2NhbWVyYUhlaWdodCcsICAgJ2NoYW5nZScsIGZ1bmN0aW9uKGV2KSB7IERvbS5ibHVyKGV2KTsgcmVzZXQoeyBjYW1lcmFIZWlnaHQ6ICBVdGlsLmxpbWl0KFV0aWwudG9JbnQoZXYudGFyZ2V0LnZhbHVlKSwgVXRpbC50b0ludChldi50YXJnZXQuZ2V0QXR0cmlidXRlKCdtaW4nKSksIFV0aWwudG9JbnQoZXYudGFyZ2V0LmdldEF0dHJpYnV0ZSgnbWF4JykpKSB9KTsgfSk7XHJcbiAgICBEb20ub24oJ2RyYXdEaXN0YW5jZScsICAgJ2NoYW5nZScsIGZ1bmN0aW9uKGV2KSB7IERvbS5ibHVyKGV2KTsgcmVzZXQoeyBkcmF3RGlzdGFuY2U6ICBVdGlsLmxpbWl0KFV0aWwudG9JbnQoZXYudGFyZ2V0LnZhbHVlKSwgVXRpbC50b0ludChldi50YXJnZXQuZ2V0QXR0cmlidXRlKCdtaW4nKSksIFV0aWwudG9JbnQoZXYudGFyZ2V0LmdldEF0dHJpYnV0ZSgnbWF4JykpKSB9KTsgfSk7XHJcbiAgICBEb20ub24oJ2ZpZWxkT2ZWaWV3JywgICAgJ2NoYW5nZScsIGZ1bmN0aW9uKGV2KSB7IERvbS5ibHVyKGV2KTsgcmVzZXQoeyBmaWVsZE9mVmlldzogICBVdGlsLmxpbWl0KFV0aWwudG9JbnQoZXYudGFyZ2V0LnZhbHVlKSwgVXRpbC50b0ludChldi50YXJnZXQuZ2V0QXR0cmlidXRlKCdtaW4nKSksIFV0aWwudG9JbnQoZXYudGFyZ2V0LmdldEF0dHJpYnV0ZSgnbWF4JykpKSB9KTsgfSk7XHJcbiAgICBEb20ub24oJ2ZvZ0RlbnNpdHknLCAgICAgJ2NoYW5nZScsIGZ1bmN0aW9uKGV2KSB7IERvbS5ibHVyKGV2KTsgcmVzZXQoeyBmb2dEZW5zaXR5OiAgICBVdGlsLmxpbWl0KFV0aWwudG9JbnQoZXYudGFyZ2V0LnZhbHVlKSwgVXRpbC50b0ludChldi50YXJnZXQuZ2V0QXR0cmlidXRlKCdtaW4nKSksIFV0aWwudG9JbnQoZXYudGFyZ2V0LmdldEF0dHJpYnV0ZSgnbWF4JykpKSB9KTsgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gcmVmcmVzaFR3ZWFrVUkoKSB7XHJcbiAgICAgIERvbS5nZXQoJ2xhbmVzJykuc2VsZWN0ZWRJbmRleCA9IGxhbmVzLTE7XHJcbiAgICAgIERvbS5nZXQoJ2N1cnJlbnRSb2FkV2lkdGgnKS5pbm5lckhUTUwgICAgICA9IERvbS5nZXQoJ3JvYWRXaWR0aCcpLnZhbHVlICAgICAgPSByb2FkV2lkdGg7XHJcbiAgICAgIERvbS5nZXQoJ2N1cnJlbnRDYW1lcmFIZWlnaHQnKS5pbm5lckhUTUwgICA9IERvbS5nZXQoJ2NhbWVyYUhlaWdodCcpLnZhbHVlICAgPSBjYW1lcmFIZWlnaHQ7XHJcbiAgICAgIERvbS5nZXQoJ2N1cnJlbnREcmF3RGlzdGFuY2UnKS5pbm5lckhUTUwgICA9IERvbS5nZXQoJ2RyYXdEaXN0YW5jZScpLnZhbHVlICAgPSBkcmF3RGlzdGFuY2U7XHJcbiAgICAgIERvbS5nZXQoJ2N1cnJlbnRGaWVsZE9mVmlldycpLmlubmVySFRNTCAgICA9IERvbS5nZXQoJ2ZpZWxkT2ZWaWV3JykudmFsdWUgICAgPSBmaWVsZE9mVmlldztcclxuICAgICAgRG9tLmdldCgnY3VycmVudEZvZ0RlbnNpdHknKS5pbm5lckhUTUwgICAgID0gRG9tLmdldCgnZm9nRGVuc2l0eScpLnZhbHVlICAgICA9IGZvZ0RlbnNpdHk7XHJcbiAgICB9XHJcblxyXG4gICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvYXBwLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7\n")},,,,,,,,function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Game = undefined;\n\nvar _dom = __webpack_require__(4);\n\nvar _dom2 = _interopRequireDefault(_dom);\n\nvar _util = __webpack_require__(1);\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _stats = __webpack_require__(18);\n\nvar _stats2 = _interopRequireDefault(_stats);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconsole.log('THis is Stats!:', _stats2.default); //=========================================================================\n// GAME LOOP helpers\n//=========================================================================\nvar Game = exports.Game = { // a modified version of the game loop from my previous boulderdash game - see http://codeincomplete.com/posts/2011/10/25/javascript_boulderdash/#gameloop\n\n  run: function run(options) {\n\n    Game.loadImages(options.images, function (images) {\n\n      options.ready(images); // tell caller to initialize itself because images are loaded and we're ready to rumble\n\n      Game.setKeyListener(options.keys);\n\n      var canvas = options.canvas,\n          // canvas render target is provided by caller\n      update = options.update,\n          // method to update game logic is provided by caller\n      render = options.render,\n          // method to render the game is provided by caller\n      step = options.step,\n          // fixed frame step (1/fps) is specified by caller\n      stats = options.stats,\n          // stats instance is provided by caller\n      now = null,\n          last = _util2.default.timestamp(),\n          dt = 0,\n          gdt = 0;\n\n      function frame() {\n        now = _util2.default.timestamp();\n        dt = Math.min(1, (now - last) / 1000); // using requestAnimationFrame have to be able to handle large delta's caused when it 'hibernates' in a background or non-visible tab\n        gdt = gdt + dt;\n        while (gdt > step) {\n          gdt = gdt - step;\n          update(step);\n        }\n        render();\n        stats.update();\n        last = now;\n        requestAnimationFrame(frame, canvas);\n      }\n      frame(); // lets get this party started\n      Game.playMusic();\n    });\n  },\n\n  //---------------------------------------------------------------------------\n\n  loadImages: function loadImages(names, callback) {\n    // load multiple images and callback when ALL images have loaded\n    var result = [];\n    var count = names.length;\n\n    var onload = function onload() {\n      if (--count == 0) {\n        callback(result);\n      }\n    };\n\n    for (var n = 0; n < names.length; n++) {\n      var name = names[n];\n      result[n] = document.createElement('img');\n      _dom2.default.on(result[n], 'load', onload);\n      result[n].src = \"images/\" + name + \".png\";\n    }\n  },\n\n  //---------------------------------------------------------------------------\n\n  setKeyListener: function setKeyListener(keys) {\n    var onkey = function onkey(keyCode, mode) {\n      var n, k;\n      for (n = 0; n < keys.length; n++) {\n        k = keys[n];\n        k.mode = k.mode || 'up';\n        if (k.key == keyCode || k.keys && k.keys.indexOf(keyCode) >= 0) {\n          if (k.mode == mode) {\n            k.action.call();\n          }\n        }\n      }\n    };\n    _dom2.default.on(document, 'keydown', function (ev) {\n      onkey(ev.keyCode, 'down');\n    });\n    _dom2.default.on(document, 'keyup', function (ev) {\n      onkey(ev.keyCode, 'up');\n    });\n  },\n\n  //---------------------------------------------------------------------------\n\n  stats: function stats(parentId, id) {\n    // construct mr.doobs FPS counter - along with friendly good/bad/ok message box\n    console.log('Stats from game.js: ', _stats2.default);\n    var result = new _stats2.default();\n    result.domElement.id = id || 'stats';\n    _dom2.default.get(parentId).appendChild(result.domElement);\n\n    var msg = document.createElement('div');\n    msg.style.cssText = \"border: 2px solid gray; padding: 5px; margin-top: 5px; text-align: left; font-size: 1.15em; text-align: right;\";\n    msg.innerHTML = \"Your canvas performance is \";\n    _dom2.default.get(parentId).appendChild(msg);\n\n    var value = document.createElement('span');\n    value.innerHTML = \"...\";\n    msg.appendChild(value);\n\n    setInterval(function () {\n      var fps = result.current();\n      var ok = fps > 50 ? 'good' : fps < 30 ? 'bad' : 'ok';\n      var color = fps > 50 ? 'green' : fps < 30 ? 'red' : 'gray';\n      value.innerHTML = ok;\n      value.style.color = color;\n      msg.style.borderColor = color;\n    }, 5000);\n    return result;\n  },\n\n  //---------------------------------------------------------------------------\n\n  playMusic: function playMusic() {\n    var music = _dom2.default.get('music');\n    music.loop = true;\n    music.volume = 0.05; // shhhh! annoying music!\n    music.muted = _dom2.default.storage.muted === \"true\";\n    music.play();\n    _dom2.default.toggleClassName('mute', 'on', music.muted);\n    _dom2.default.on('mute', 'click', function () {\n      _dom2.default.storage.muted = music.muted = !music.muted;\n      _dom2.default.toggleClassName('mute', 'on', music.muted);\n    });\n  }\n\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n//=========================================================================\n// POLYFILL for requestAnimationFrame\n//=========================================================================\n\nmodule.exports = function () {\n  if (!window.requestAnimationFrame) {\n    // http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n    window.requestAnimationFrame = window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback, element) {\n      window.setTimeout(callback, 1000 / 60);\n    };\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvbW9kdWxlcy9yYWYuanM/M2VlYSJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwid2luZG93IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwib1JlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FsbGJhY2siLCJlbGVtZW50Iiwic2V0VGltZW91dCJdLCJtYXBwaW5ncyI6Ijs7QUFDQTtBQUNBO0FBQ0E7O0FBRUFBLE9BQU9DLE9BQVAsR0FBaUIsWUFBVztBQUN4QixNQUFJLENBQUNDLE9BQU9DLHFCQUFaLEVBQW1DO0FBQUU7QUFDbkNELFdBQU9DLHFCQUFQLEdBQStCRCxPQUFPRSwyQkFBUCxJQUNERixPQUFPRyx3QkFETixJQUVESCxPQUFPSSxzQkFGTixJQUdESixPQUFPSyx1QkFITixJQUlELFVBQVNDLFFBQVQsRUFBbUJDLE9BQW5CLEVBQTRCO0FBQzFCUCxhQUFPUSxVQUFQLENBQWtCRixRQUFsQixFQUE0QixPQUFPLEVBQW5DO0FBQ0QsS0FOL0I7QUFPRDtBQUNGLENBVkgiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gUE9MWUZJTEwgZm9yIHJlcXVlc3RBbmltYXRpb25GcmFtZVxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7IC8vIGh0dHA6Ly9wYXVsaXJpc2guY29tLzIwMTEvcmVxdWVzdGFuaW1hdGlvbmZyYW1lLWZvci1zbWFydC1hbmltYXRpbmcvXG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgICAgfHwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cub1JlcXVlc3RBbmltYXRpb25GcmFtZSAgICAgIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lICAgICB8fCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGNhbGxiYWNrLCBlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICB9XG4gIH07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL21vZHVsZXMvcmFmLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _constants = __webpack_require__(3);\n\nvar _util = __webpack_require__(1);\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//=========================================================================\n// canvas rendering helpers\n//=========================================================================\nvar Render = {\n\n  polygon: function polygon(ctx, x1, y1, x2, y2, x3, y3, x4, y4, color) {\n    ctx.fillStyle = color;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.lineTo(x3, y3);\n    ctx.lineTo(x4, y4);\n    ctx.closePath();\n    ctx.fill();\n  },\n\n  //---------------------------------------------------------------------------\n\n  segment: function segment(ctx, width, lanes, x1, y1, w1, x2, y2, w2, fog, color) {\n\n    var r1 = Render.rumbleWidth(w1, lanes),\n        r2 = Render.rumbleWidth(w2, lanes),\n        l1 = Render.laneMarkerWidth(w1, lanes),\n        l2 = Render.laneMarkerWidth(w2, lanes),\n        lanew1,\n        lanew2,\n        lanex1,\n        lanex2,\n        lane;\n\n    ctx.fillStyle = color.grass;\n    ctx.fillRect(0, y2, width, y1 - y2);\n\n    Render.polygon(ctx, x1 - w1 - r1, y1, x1 - w1, y1, x2 - w2, y2, x2 - w2 - r2, y2, color.rumble);\n    Render.polygon(ctx, x1 + w1 + r1, y1, x1 + w1, y1, x2 + w2, y2, x2 + w2 + r2, y2, color.rumble);\n    Render.polygon(ctx, x1 - w1, y1, x1 + w1, y1, x2 + w2, y2, x2 - w2, y2, color.road);\n\n    if (color.lane) {\n      lanew1 = w1 * 2 / lanes;\n      lanew2 = w2 * 2 / lanes;\n      lanex1 = x1 - w1 + lanew1;\n      lanex2 = x2 - w2 + lanew2;\n      for (lane = 1; lane < lanes; lanex1 += lanew1, lanex2 += lanew2, lane++) {\n        Render.polygon(ctx, lanex1 - l1 / 2, y1, lanex1 + l1 / 2, y1, lanex2 + l2 / 2, y2, lanex2 - l2 / 2, y2, color.lane);\n      }\n    }\n\n    Render.fog(ctx, 0, y1, width, y2 - y1, fog);\n  },\n\n  //---------------------------------------------------------------------------\n\n  background: function background(ctx, _background, width, height, layer, rotation, offset) {\n\n    rotation = rotation || 0;\n    offset = offset || 0;\n\n    var imageW = layer.w / 2;\n    var imageH = layer.h;\n\n    var sourceX = layer.x + Math.floor(layer.w * rotation);\n    var sourceY = layer.y;\n    var sourceW = Math.min(imageW, layer.x + layer.w - sourceX);\n    var sourceH = imageH;\n\n    var destX = 0;\n    var destY = offset;\n    var destW = Math.floor(width * (sourceW / imageW));\n    var destH = height;\n\n    ctx.drawImage(_background, sourceX, sourceY, sourceW, sourceH, destX, destY, destW, destH);\n    if (sourceW < imageW) {\n      ctx.drawImage(_background, layer.x, sourceY, imageW - sourceW, sourceH, destW - 1, destY, width - destW, destH);\n    }\n  },\n\n  //---------------------------------------------------------------------------\n\n  sprite: function sprite(ctx, width, height, resolution, roadWidth, sprites, _sprite, scale, destX, destY, offsetX, offsetY, clipY) {\n\n    //  scale for projection AND relative to roadWidth (for tweakUI)\n    var destW = _sprite.w * scale * width / 2 * (_constants.SPRITES.SCALE * roadWidth);\n    var destH = _sprite.h * scale * width / 2 * (_constants.SPRITES.SCALE * roadWidth);\n\n    destX = destX + destW * (offsetX || 0);\n    destY = destY + destH * (offsetY || 0);\n\n    var clipH = clipY ? Math.max(0, destY + destH - clipY) : 0;\n    if (clipH < destH) {\n      ctx.drawImage(sprites, _sprite.x, _sprite.y, _sprite.w, _sprite.h - _sprite.h * clipH / destH, destX, destY, destW, destH - clipH);\n    }\n  },\n\n  //---------------------------------------------------------------------------\n\n  player: function player(ctx, width, height, resolution, roadWidth, sprites, speedPercent, scale, destX, destY, steer, updown) {\n\n    var bounce = 1.5 * Math.random() * speedPercent * resolution * _util2.default.randomChoice([-1, 1]);\n    var sprite;\n    if (steer < 0) {\n      sprite = updown > 0 ? _constants.SPRITES.PLAYER_UPHILL_LEFT : _constants.SPRITES.PLAYER_LEFT;\n    } else if (steer > 0) {\n      sprite = updown > 0 ? _constants.SPRITES.PLAYER_UPHILL_RIGHT : _constants.SPRITES.PLAYER_RIGHT;\n    } else {\n      sprite = updown > 0 ? _constants.SPRITES.PLAYER_UPHILL_STRAIGHT : _constants.SPRITES.PLAYER_STRAIGHT;\n    }\n    Render.sprite(ctx, width, height, resolution, roadWidth, sprites, sprite, scale, destX, destY + bounce, -0.5, -1);\n  },\n\n  //---------------------------------------------------------------------------\n\n  fog: function fog(ctx, x, y, width, height, _fog) {\n    if (_fog < 1) {\n      ctx.globalAlpha = 1 - _fog;\n      ctx.fillStyle = _constants.COLORS.FOG;\n      ctx.fillRect(x, y, width, height);\n      ctx.globalAlpha = 1;\n    }\n  },\n\n  rumbleWidth: function rumbleWidth(projectedRoadWidth, lanes) {\n    return projectedRoadWidth / Math.max(6, 2 * lanes);\n  },\n  laneMarkerWidth: function laneMarkerWidth(projectedRoadWidth, lanes) {\n    return projectedRoadWidth / Math.max(32, 8 * lanes);\n  }\n\n};\n\nmodule.exports = Render;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar Stats = function Stats() {\n\n  var startTime = Date.now(),\n      prevTime = startTime;\n  var ms = 0,\n      msMin = 1000,\n      msMax = 0;\n  var fps = 0,\n      fpsMin = 1000,\n      fpsMax = 0;\n  var frames = 0,\n      mode = 0;\n  var container = document.createElement('div');\n  container.id = 'stats';\n  container.addEventListener('mousedown', function (event) {\n    event.preventDefault();\n    setMode(++mode % 2);\n  }, false);\n  container.style.cssText = 'width:80px;opacity:0.9;cursor:pointer';\n\n  var fpsDiv = document.createElement('div');\n  fpsDiv.id = 'fps';\n  fpsDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:#002';\n  container.appendChild(fpsDiv);\n\n  var fpsText = document.createElement('div');\n  fpsText.id = 'fpsText';\n  fpsText.style.cssText = 'color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';\n  fpsText.innerHTML = 'FPS';\n  fpsDiv.appendChild(fpsText);\n\n  var fpsGraph = document.createElement('div');\n  fpsGraph.id = 'fpsGraph';\n  fpsGraph.style.cssText = 'position:relative;width:74px;height:30px;background-color:#0ff';\n  fpsDiv.appendChild(fpsGraph);\n\n  while (fpsGraph.children.length < 74) {\n\n    var bar = document.createElement('span');\n    bar.style.cssText = 'width:1px;height:30px;float:left;background-color:#113';\n    fpsGraph.appendChild(bar);\n  }\n\n  var msDiv = document.createElement('div');\n  msDiv.id = 'ms';\n  msDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:#020;display:none';\n  container.appendChild(msDiv);\n\n  var msText = document.createElement('div');\n  msText.id = 'msText';\n  msText.style.cssText = 'color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';\n  msText.innerHTML = 'MS';\n  msDiv.appendChild(msText);\n\n  var msGraph = document.createElement('div');\n  msGraph.id = 'msGraph';\n  msGraph.style.cssText = 'position:relative;width:74px;height:30px;background-color:#0f0';\n  msDiv.appendChild(msGraph);\n\n  while (msGraph.children.length < 74) {\n\n    var _bar = document.createElement('span');\n    _bar.style.cssText = 'width:1px;height:30px;float:left;background-color:#131';\n    msGraph.appendChild(_bar);\n  }\n\n  var setMode = function setMode(value) {\n\n    mode = value;\n\n    switch (mode) {\n\n      case 0:\n        fpsDiv.style.display = 'block';\n        msDiv.style.display = 'none';\n        break;\n      case 1:\n        fpsDiv.style.display = 'none';\n        msDiv.style.display = 'block';\n        break;\n    }\n  };\n\n  var updateGraph = function updateGraph(dom, value) {\n    var child = dom.appendChild(dom.firstChild);\n    child.style.height = value + 'px';\n  };\n\n  return {\n\n    domElement: container,\n\n    setMode: setMode,\n\n    current: function current() {\n      return fps;\n    },\n\n    begin: function begin() {\n\n      startTime = Date.now();\n    },\n\n    end: function end() {\n\n      var time = Date.now();\n\n      ms = time - startTime;\n      msMin = Math.min(msMin, ms);\n      msMax = Math.max(msMax, ms);\n\n      msText.textContent = ms + ' MS (' + msMin + '-' + msMax + ')';\n      updateGraph(msGraph, Math.min(30, 30 - ms / 200 * 30));\n\n      frames++;\n\n      if (time > prevTime + 1000) {\n\n        fps = Math.round(frames * 1000 / (time - prevTime));\n        fpsMin = Math.min(fpsMin, fps);\n        fpsMax = Math.max(fpsMax, fps);\n\n        fpsText.textContent = fps + ' FPS (' + fpsMin + '-' + fpsMax + ')';\n        updateGraph(fpsGraph, Math.min(30, 30 - fps / 100 * 30));\n\n        prevTime = time;\n        frames = 0;\n      }\n\n      return time;\n    },\n\n    update: function update() {\n\n      startTime = this.end();\n    }\n\n  };\n};\n\nmodule.exports = Stats;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n")},,,,,,,,,,,,function(Q,F,B){Q.exports=B(7)}],[30]);